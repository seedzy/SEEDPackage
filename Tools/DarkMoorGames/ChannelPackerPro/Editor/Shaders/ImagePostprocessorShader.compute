#pragma kernel PostprocessGreyScale
#pragma kernel PostprocessColorToAlpha
#pragma kernel PostprocessColorReplace
#pragma kernel PostprocessBrightnessContrast
#pragma kernel PostprocessHSV
#pragma kernel PostprocessSepia
#pragma kernel PostprocessColorize
#pragma kernel PostprocessNormalMap
#pragma kernel PostprocessChannelFactor

#if !defined(PI)
#define PI 3.14159265358979323846
#endif

#if !defined(EPSILON)
#define EPSILON 1e-10
#endif

uint ImageWidth;
uint ImageHeight;

float Brightness;
float Contrast;

float Hue;
float Saturation;
float Value;

float Min;
float Max;

int IntValue;
bool Invert;
float Threshold;
float4 Color1;
float4 Color2;

float Scale;
float Hardness;
float OffsetX;
float OffsetY;
float Rotation;

float Strength;

int Size;
int Thickness;

float RedFactor;
float GreenFactor;
float BlueFactor;
float AlphaFactor;

Texture2D<float4> Original;
RWTexture2D<float4> Output;

float3 HUEtoRGB(float hue)
{
	// Hue [0..1] to RGB [0..1]
	// See http://www.chilliant.com/rgb2hsv.html
	float3 rgb = abs(hue * 6.0 - float3(3.0, 2.0, 4.0)) * float3(1.0, -1.0, -1.0) + float3(-1.0, 2.0, 2.0);
	return saturate(rgb);
}
float3 HSVtoRGB(float3 hsv)
{
	// Hue-Saturation-Value [0..1] to RGB [0..1]
	float3 rgb = HUEtoRGB(hsv.x);
	return ((rgb - 1.0) * hsv.y + 1.0) * hsv.z;
}
float3 RGBtoHCV(float3 rgb)
{
	// RGB [0..1] to Hue-Chroma-Value [0..1]
	// Based on work by Sam Hocevar and Emil Persson
	float4 p = (rgb.g < rgb.b) ? float4(rgb.bg, -1.0, 2.0 / 3.0) : float4(rgb.gb, 0.0, -1.0 / 3.0);
	float4 q = (rgb.r < p.x) ? float4(p.xyw, rgb.r) : float4(rgb.r, p.yzx);
	float c = q.x - min(q.w, q.y);
	float h = abs((q.w - q.y) / (6.0 * c + EPSILON) + q.z);
	return float3(h, c, q.x);
}
float3 RGBtoHSV(float3 rgb)
{
	// RGB [0..1] to Hue-Saturation-Value [0..1]
	float3 hcv = RGBtoHCV(rgb);
	float s = hcv.y / (hcv.z + EPSILON);
	return float3(hcv.x, s, hcv.z);
}

[numthreads(8, 8, 1)]
void PostprocessGreyScale(uint3 id : SV_DispatchThreadID)
{
	float4 output = Original[id.xy];

	float3 final = lerp(output.rgb, dot(output.rgb, float3(0.299, 0.587, 0.114)), Value);
	Output[id.xy] = float4(final.r, final.g, final.b, output.a);
}
[numthreads(8, 8, 1)]
void PostprocessColorToAlpha(uint3 id : SV_DispatchThreadID)
{
	float4 output = Original[id.xy];
	float d = distance(output.rgb, Color1.rgb);

	output.a = lerp(0.0, 1.0, smoothstep(Min, Max, d));
	Output[id.xy] = output;
}
[numthreads(8, 8, 1)]
void PostprocessColorReplace(uint3 id : SV_DispatchThreadID)
{
	float4 output = Original[id.xy];
	float3 c = lerp(Color2.rgb, output.rgb, smoothstep(Min, Max, distance(output.rgb, Color1.rgb)));
	Output[id.xy] = float4(c.rgb, output.a);
}
[numthreads(8, 8, 1)]
void PostprocessBrightnessContrast(uint3 id : SV_DispatchThreadID)
{
	float4 output = Original[id.xy];
	float factor = (Contrast + 1.0) / (1.0 - Contrast);

	output.rgb = saturate(output.rgb + Brightness) * factor;
	Output[id.xy] = output;
}
[numthreads(8, 8, 1)]
void PostprocessHSV(uint3 id : SV_DispatchThreadID)
{
	float4 output = Original[id.xy];

	float3 hsv = RGBtoHSV(output.rgb);
	hsv.x = (hsv.x + Hue) % 1.0;
	hsv.y = saturate(hsv.y + Saturation);
	hsv.z = saturate(hsv.z + Value);

	float3 rgb = HSVtoRGB(hsv);
	Output[id.xy] = float4(rgb, output.a);
}
[numthreads(8, 8, 1)]
void PostprocessSepia(uint3 id : SV_DispatchThreadID)
{
	float4 output = Original[id.xy];
	float r = 0.393 * output.r + 0.769 * output.g + 0.189 * output.b;
	float g = 0.349 * output.r + 0.686 * output.g + 0.168 * output.b;
	float b = 0.272 * output.r + 0.534 * output.g + 0.131 * output.b;

	float3 c = lerp(output.rgb, float3(r, g, b), Value);
	Output[id.xy] = float4(c, output.a);
}
[numthreads(8, 8, 1)]
void PostprocessColorize(uint3 id : SV_DispatchThreadID)
{
	float4 source = Original[id.xy];

	float3 color = dot(source.rgb, float3(0.299, 0.587, 0.114));
	color *= Color1.rgb;

	Output[id.xy] = float4(color.rgb, source.a);
}
[numthreads(8, 8, 1)]
void PostprocessNormalMap(uint3 id : SV_DispatchThreadID)
{
	float4 original = Original[id.xy];

	float3 current = Original[id.xy].rgb;
	float3 left = Original[id.xy + uint2(-1, 0)].rgb;
	float3 right = Original[id.xy + uint2(1, 0)].rgb;
	float3 up = Original[id.xy + uint2(0, 1)].rgb;
	float3 down = Original[id.xy + uint2(0, -1)].rgb;

	if (id.x == 0)
	{
		left = right;
	}
	if (id.x == ImageWidth -1)
	{
		right = left;
	}
	if (id.y == 0)
	{
		down = up;
	}
	if (id.y == ImageHeight - 1)
	{
		up = down;
	}

	float x = ((left.r - current.r) + (current.r - right.r)) * 0.5;
	float y = ((down.g - current.g) + (current.g - up.g)) * 0.5;

	float dir = sign(Strength);
	float height = 1.0 / Strength;

	float3 normal = float3(x * dir, y * dir, height);
	normal = normalize(normal);
	normal = float3(normal.rg * 0.5 + 0.5, 1.0);
	Output[id.xy] = float4(normal.rg, 1.0, original.a);
}
[numthreads(8, 8, 1)]
void PostprocessChannelFactor(uint3 id : SV_DispatchThreadID)
{
	float4 source = Original[id.xy];
	source.r *= RedFactor;
	source.g *= GreenFactor;
	source.b *= BlueFactor;
	source.a *= AlphaFactor;
	Output[id.xy] = source;
}